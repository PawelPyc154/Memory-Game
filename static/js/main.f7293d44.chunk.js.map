{"version":3,"sources":["Choice.tsx","Card.tsx","Cards.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Choice","setChoice","className","type","onClick","Card","card","handleClick","hidden","matched","id","value","Cards","choice","useState","cards","setCards","useEffect","array","i","Math","random","toFixed","map","item","index","itemm","sort","visible","filter","length","setTimeout","prev","prevState","counter","setcCunter","style","gridTemplateColumns","gridTemplateRows","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7293d44.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction } from 'react';\r\nimport './Choice.css';\r\n\r\nexport interface ChoiceProps {\r\n  setChoice: Dispatch<SetStateAction<number>>;\r\n}\r\n\r\nconst Choice: React.SFC<ChoiceProps> = ({ setChoice }) => {\r\n  return (\r\n    <>\r\n      <div className=\"choice\">\r\n        <button className=\"choice__btn choice__btn--easy\" type=\"button\" onClick={() => setChoice(4)}>\r\n          Easy\r\n        </button>\r\n        <button className=\"choice__btn choice__btn--middle\" type=\"button\" onClick={() => setChoice(6)}>\r\n          Middle\r\n        </button>\r\n        <button className=\"choice__btn choice__btn--hard\" type=\"button\" onClick={() => setChoice(8)}>\r\n          Hard\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Choice;\r\n","import React from 'react';\r\n\r\nexport interface CardProps {\r\n  card: { id: number; value: string; hidden: boolean; matched: boolean };\r\n  handleClick: (number: number) => void;\r\n}\r\n\r\nconst Card: React.SFC<CardProps> = ({ card, handleClick }) => {\r\n  return (\r\n    <>\r\n      {card.hidden ? (\r\n        <div className={`card ${card.matched ? 'matched' : ''}`} onClick={() => handleClick(card.id)} />\r\n      ) : (\r\n        <div className=\"card card__number\">{card.value}</div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect, Dispatch, SetStateAction } from 'react';\r\n\r\nimport './App.css';\r\nimport Card from './Card';\r\n\r\ninterface CardType {\r\n  id: number;\r\n  value: string;\r\n  hidden: boolean;\r\n  matched: boolean;\r\n}\r\n\r\nexport interface CardsProps {\r\n  choice: number;\r\n  setChoice: Dispatch<SetStateAction<number>>;\r\n}\r\n\r\nconst Cards: React.SFC<CardsProps> = ({ choice, setChoice }) => {\r\n  const [cards, setCards] = useState<CardType[] | null>(null);\r\n\r\n  // add random item to cards state\r\n  useEffect(() => {\r\n    let array: CardType[] = [];\r\n    // add random item too array\r\n    for (let i = 0; i < (choice * choice) / 2; i++) {\r\n      array[i] = { id: 0, value: (Math.random() * 100).toFixed(), hidden: true, matched: false };\r\n    }\r\n    // duplicate item in array\r\n    array = [...array, ...array];\r\n    // unique id\r\n    array = array.map((item: CardType, index: number) => {\r\n      const itemm = { ...item };\r\n      itemm.id = index;\r\n      return itemm;\r\n    });\r\n    // mix array\r\n    array.sort(() => Math.random() - 0.5);\r\n    setCards(array);\r\n  }, []);\r\n\r\n  // logic matched and hidde card\r\n  useEffect(() => {\r\n    const visible = cards?.filter((card: CardType) => card.hidden === false);\r\n\r\n    if (visible && visible.length === 2) {\r\n      if (visible[0].value === visible[1].value) {\r\n        setTimeout(() => {\r\n          setCards(\r\n            (prev: CardType[] | null) =>\r\n              prev &&\r\n              prev.map((card: CardType) =>\r\n                card.value === visible[0].value ? { ...card, hidden: true, matched: true } : card,\r\n              ),\r\n          );\r\n        }, 500);\r\n      } else {\r\n        setTimeout(() => {\r\n          setCards(\r\n            (prevState: CardType[] | null) =>\r\n              prevState && prevState.map((card: CardType) => ({ ...card, hidden: true })),\r\n          );\r\n        }, 500);\r\n      }\r\n    }\r\n  }, [cards]);\r\n\r\n  const [counter, setcCunter] = useState(0);\r\n\r\n  // visible card and count\r\n\r\n  const handleClick = (id: number) => {\r\n    setcCunter(prev => prev + 1);\r\n    if (cards && cards.filter((card: CardType) => card.hidden === false).length < 2) {\r\n      setCards(\r\n        (prev: CardType[] | null) =>\r\n          prev && prev.map((card: CardType) => (card.id === id ? { ...card, hidden: false } : card)),\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {cards?.filter((card: CardType) => card.matched === false).length !== 0 ? (\r\n        <div\r\n          className=\"cards\"\r\n          style={{ gridTemplateColumns: `repeat(${choice}, 100px)`, gridTemplateRows: `repeat(${choice}, 100px)` }}\r\n        >\r\n          {cards?.map((card: CardType) => (\r\n            <Card card={card} handleClick={handleClick} key={card.id} />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"score\">\r\n          Your score:\r\n          <strong>{(counter / (choice * choice)).toFixed(3)}</strong>\r\n          <button type=\"button\" className=\"btn\" onClick={() => setChoice(0)}>\r\n            Restart\r\n          </button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React, { useState } from 'react';\r\nimport Choice from './Choice';\r\nimport Cards from './Cards';\r\n\r\nfunction App() {\r\n  const [choice, setChoice] = useState(0);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {choice === 0 ? <Choice setChoice={setChoice} /> : <Cards choice={choice} setChoice={setChoice} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}